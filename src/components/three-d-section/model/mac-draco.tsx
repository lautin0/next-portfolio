'use client';

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useFrame } from '@react-three/fiber';
import { Html, useGLTF } from '@react-three/drei';
import HeroPage from './fake-page';
import { a as three } from '@react-spring/three';

export const Model = React.memo(function Model(props: any) {
  const { hinge } = props;
  const group = useRef<any>(null);
  // Load model
  const { nodes, materials } = useGLTF('/mac-draco.glb');
  // Make it float
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    group.current.rotation.x = THREE.MathUtils.lerp(
      group.current.rotation.x,
      Math.cos(t / 2) / 20 + 0.25,
      0.1
    );
    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      Math.sin(t / 4) / 20,
      0.1
    );
    group.current.rotation.z = THREE.MathUtils.lerp(
      group.current.rotation.z,
      Math.sin(t / 8) / 20,
      0.1
    );
    group.current.position.y = THREE.MathUtils.lerp(
      group.current.position.y,
      (-2 + Math.sin(t / 2)) / 2,
      0.1
    );
  });
  // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx
  return (
    <group ref={group} {...props} dispose={null}>
      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            material={materials.aluminium}
            // @ts-expect-error get geometry
            geometry={nodes.Cube008.geometry}
          />
          <mesh
            material={materials['matte.001']}
            // @ts-expect-error get geometry
            geometry={nodes.Cube008_1.geometry}
          />
          {/* @ts-expect-error get geometry */}
          <mesh geometry={nodes.Cube008_2.geometry}>
            {/* Drei's HTML component can "hide behind" canvas geometry */}
            <Html
              className="content"
              rotation-x={-Math.PI / 2}
              position={[0, 0.05, -0.09]}
              transform
              occlude
              center
            >
              <div className="wrapper" onPointerDown={(e) => e.stopPropagation()}>
                <MemorizedHeroPage />
              </div>
            </Html>
          </mesh>
        </group>
      </three.group>
      <mesh
        material={materials.keys}
        // @ts-expect-error get geometry
        geometry={nodes.keyboard.geometry}
        position={[1.79, 0, 3.45]}
      />
      <group position={[0, -0.1, 3.39]}>
        <mesh
          material={materials.aluminium}
          // @ts-expect-error get geometry
          geometry={nodes.Cube002.geometry}
        />
        <mesh
          material={materials.trackpad}
          // @ts-expect-error get geometry
          geometry={nodes.Cube002_1.geometry}
        />
      </group>
      <mesh
        material={materials.touchbar}
        // @ts-expect-error get geometry
        geometry={nodes.touchbar.geometry}
        position={[0, -0.03, 1.2]}
      />
    </group>
  );
});

const MemorizedHeroPage = React.memo(HeroPage);

useGLTF.preload('/mac-draco.glb');
